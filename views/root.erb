<h1>Welcome to the Nested Forms Lab!</h1>
 <p>In this lab, you'll practice using nested forms in Sinatra. As a convenience, I've added the instructions from the README below:</p>
<p>This is a lab meant to test your understanding of nested forms and how they work. As a convenience, I've added the instructions from the README below:</p>
 <ul>
  <li>Note: YOU DO NOT NEED A DATABASE, since we just need to keep track of the forms input long enough to display it, and not persist it. We don't expect the pirate to be there the next time we come to their URL, but it'd be cool if they were.</li>
  <li>Note: YOU DO NOT NEED A DATABASE, we just need to keep track of the forms input long enough to display it, not persist it.  I don't expect the pirate to be there the next time I come to his URL, but it'd be cool if he was.</li>
   <li>Create two classes, a Pirate class and a Ship class. Pirates should have a name, weight, and height. You will also need a class method that returns all the pirates. The ship class should have name, type, and booty attributes, as well as a class method .all that returns all the ships and a class method .clear that deletes all ships.</li>
  <li>Decide what objects/models you want to use, I used pirates and ships, you can use this or anything else.</li>
   <li>Make a nested form (this should probably have html <label>s so it makes sense to a user). This form will be creating three objects (one instance of the Pirate class, and two instances of the Ship class). Remember, you'll need to build a corresponding controller action to load this page. Your form should POST to the route '/pirates'.</li>
  <li>Other examples: Artists and Songs, Programmers and Languages they know, Schools and Students</li>
   <li>After a user clicks submit they should be taken to a page that displays all the information we just posted from the form. You should have a page that shows the pirate you created along with their ships and all the details about the pirate and their ships.</li>
  <li>Make a nested form (this should probably have html `<label>`s so it makes sense to a user).</li>
   <li>Pass the tests! You'll notice in specs that we use Capybara to fill in certain fields.</li>
  <li>After a user clicks submit they should be taken to a page that displays all the information we just posted from the form.  In my example I'd have a page that showed the pirate I created along with his ships and all the details about the pirate and his ships.</li>
   <li>The word in quotes after fill_in needs to be set as an ID in the form. This is because your ship name one and two will have the same name property. Capybara needs some sort of unique indentifier, so we use id. </li>
  <li>I'm intentionally being vague about exactly what routes you need or how to set this all up.  We can all review together how you structured your routes and talk about the postives and negatives.  Do what you think makes the most sense.  Follow REST conventions.  Use the internet to figure it out if need be.</li>
   <li>This is an excercise in REST conventions, HTML forms and params.  Please use the debugger and/or puts to see how changing the type of HTML you use changes the params. Spend some time thinking about your routes.</li>
   <li>In order to start the lab, let's navigate to the '/new' path. You'll currently have an empty <strong>erb</strong> file, so your job is to fill in the form. Make sure the RSpec tests pass.</li>